import subprocess
import sys
import os.path
 
# total arguments
n = len(sys.argv)

def setup_testfile(name: int, path: str):
  task_file = os.path.join(path, f"task{name}.c")
  if name == 1:
      with open(task_file,'r') as contents:
        save = contents.read()
      with open(task_file,'w') as contents:
        contents.write("#include <stdio.h>\n")
        contents.write("#include <stdlib.h>\n")
        contents.write("#include <getopt.h>\n")
        contents.write("#include <string.h>\n")
        contents.write("#include \"list.h\"\n")
        contents.write("#ifdef UNIT_TESTING\n")
        contents.write("#ifdef printf\n")
        contents.write("#undef printf\n")
        contents.write("#endif /* printf */\n")
        contents.write("extern int test_printf(const char *format, ...);\n")
        contents.write("#define printf test_printf\n")
        contents.write("#endif\n")
        contents.write("#define MAX_ITEM_PRINT_LEN 100\n")
        contents.write("int list_init(node **head) {\n")
        contents.write("*head = NULL;\n")
        contents.write("return EXIT_SUCCESS; }\n")
        contents.write(save)
        contents.write("int list_update_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_remove_item_at_pos(node **head, int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_swap_item_positions(node **head, int pos1, int pos2) {\n")
        contents.write("return 0;}\n")
      #contents.close()
      #subprocess.run(["make", "clean", "-f", "makeadd"])
      #subprocess.run(["make", "-f", "makeadd"])
      #result = subprocess.run(["./runtests", "1", "0"], stdout=subprocess.PIPE)
      #print("result:\n")
      #print(result.stdout.decode('utf-8'))


  if name == 2:
      with open(task_file,'r') as contents:
        save = contents.read()
      with open(task_file,'w') as contents:
        contents.write("#include <stdio.h>\n")
        contents.write("#include <stdlib.h>\n")
        contents.write("#include <getopt.h>\n")
        contents.write("#include <string.h>\n")
        contents.write("#include \"list.h\"\n")
        contents.write("#ifdef UNIT_TESTING\n")
        contents.write("#ifdef printf\n")
        contents.write("#undef printf\n")
        contents.write("#endif /* printf */\n")
        contents.write("extern int test_printf(const char *format, ...);\n")
        contents.write("#define printf test_printf\n")
        contents.write("#endif\n")
        contents.write("#define MAX_ITEM_PRINT_LEN 100\n")
        contents.write("int list_init(node **head) {\n")
        contents.write("*head = NULL;\n")
        contents.write("return EXIT_SUCCESS; }\n")
        contents.write(save)
        contents.write("int list_add_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_remove_item_at_pos(node **head, int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_swap_item_positions(node **head, int pos1, int pos2) {\n")
        contents.write("return 0;}\n")
      #contents.close()
      #subprocess.run(["make", "clean", "-f", "makeupdate"])
      #subprocess.run(["make", "-f", "makeupdate"])  
      #result = subprocess.run(["./runtests", "2", "0"], stdout=subprocess.PIPE)
      #print("result:\n")
      #print(result.stdout.decode('utf-8'))

  if name == 3:
      with open(task_file,'r') as contents:
        save = contents.read()
      with open(task_file,'w') as contents:
        contents.write("#include <stdio.h>\n")
        contents.write("#include <stdlib.h>\n")
        contents.write("#include <getopt.h>\n")
        contents.write("#include <string.h>\n")
        contents.write("#include \"list.h\"\n")
        contents.write("#ifdef UNIT_TESTING\n")
        contents.write("#ifdef printf\n")
        contents.write("#undef printf\n")
        contents.write("#endif /* printf */\n")
        contents.write("extern int test_printf(const char *format, ...);\n")
        contents.write("#define printf test_printf\n")
        contents.write("#endif\n")
        contents.write("#define MAX_ITEM_PRINT_LEN 100\n")
        contents.write("int list_init(node **head) {\n")
        contents.write("*head = NULL;\n")
        contents.write("return EXIT_SUCCESS; }\n")
        contents.write(save)
        contents.write("int list_add_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_update_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_swap_item_positions(node **head, int pos1, int pos2) {\n")
        contents.write("return 0;}\n")
      #contents.close()
      #subprocess.run(["make", "clean", "-f", "makeremove"])
      #subprocess.run(["make", "-f", "makeremove"]) 
      #result = subprocess.run(["./runtests", "3", "0"], stdout=subprocess.PIPE)
      #print("result:\n")
      #print(result.stdout.decode('utf-8')) 

  if name == 4:
      with open(task_file,'r') as contents:
        save = contents.read()
      with open(task_file,'w') as contents:
        contents.write("#include <stdio.h>\n")
        contents.write("#include <stdlib.h>\n")
        contents.write("#include <getopt.h>\n")
        contents.write("#include <string.h>\n")
        contents.write("#include \"list.h\"\n")
        contents.write("#ifdef UNIT_TESTING\n")
        contents.write("#ifdef printf\n")
        contents.write("#undef printf\n")
        contents.write("#endif /* printf */\n")
        contents.write("extern int test_printf(const char *format, ...);\n")
        contents.write("#define printf test_printf\n")
        contents.write("#endif\n")
        contents.write("#define MAX_ITEM_PRINT_LEN 100\n")
        contents.write("int list_init(node **head) {\n")
        contents.write("*head = NULL;\n")
        contents.write("return EXIT_SUCCESS; }\n")
        contents.write(save)
        contents.write("int list_add_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_update_item_at_pos(node **head, char *item_name, float price, int quantity, unsigned int pos) {\n")
        contents.write("return 0;}\n")
        contents.write("int list_remove_item_at_pos(node **head, int pos) {\n")
        contents.write("return 0;}\n")
      #contents.close()
      #subprocess.run(["make", "clean", "-f", "makeswap"])
      #subprocess.run(["make", "-f", "makeswap"])  
      #result = subprocess.run(["./runtests", "4", "0"], stdout=subprocess.PIPE)
      #print("result:\n")
      #print(result.stdout.decode('utf-8'))

if __name__ == "__main__":
  name = int(sys.argv[1])
  setup_testfile(name)
