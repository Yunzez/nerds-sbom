##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#


user www-data;
worker_processes 1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    log_format dt_api '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      'request_time=$request_time '
                      'upstream_response_time=$upstream_response_time';

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    resolver 127.0.0.11 valid=1m;

    # Redirect to HTTPS
    server {
        listen 80 default_server;
        server_name _;

        location ~ /(submit|get_ipynb) {
            allow 192.168.150.0/24;
            deny all;
            proxy_pass http://submit:8000;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        # SSL configuration
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl_certificate /run/secrets/pub_cert;
        ssl_certificate_key /run/secrets/priv_key;
        ssl_protocols TLSv1.2 TLSv1.3;

        server_name _;

        root /var/www/devob/;
        error_page 404 /static/404.html;
        error_page 500 502 503 504 /static/50x.html;

        # Collapse accidental /dt/api/api/... to /dt/api/...
        rewrite ^/dt/api/(?:api/)+(.*)$ /dt/api/$1 redirect;   # 302

        # Collapse /dt/dt/... (two or more) to a single /dt/...
        rewrite ^/dt/(?:dt/)+(.*)$ /dt/$1 redirect;            # 302
        location = / {
            return 302 /index.php$is_args$args;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_intercept_errors on;

            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_keep_conn on;
            fastcgi_buffering off;
            fastcgi_pass landing-server:9000;
            proxy_buffering off;
            gzip off;
        }

        # Drop any requests to the notebook tree
        location ~* "/proxy/[a-f0-9]{12}/nb/tree.*$" {
            return 403 "Notebook tree access disallowed";
        }


# ROOT API — do NOT strip /api/
# location ^~ /api/ {
#   proxy_pass http://dt-apiserver:8080;   # ← NO trailing slash
#   proxy_set_header Host              $host;
#   proxy_set_header X-Real-IP         $remote_addr;
#   proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#   proxy_set_header X-Forwarded-Proto $scheme;
#   proxy_http_version 1.1;
#   proxy_set_header Upgrade    $http_upgrade;
#   proxy_set_header Connection $connection_upgrade;
#   sub_filter off;
# }
# Collapse any repeated /dt/ prefixes for API and UI
# Normalize repeated /dt/ prefixes (both API and UI)
# --- API under /dt/api (strip /dt/api/ before proxying) ---
location ^~ /dt/api/ {
    access_log /var/log/nginx/dt-api-access.log dt_api;
    # If the UI accidentally produces /dt/api/api/... collapse it once
    if ($request_uri ~ ^/dt/api/(?:api/)+(.*)$) {
        return 301 /dt/api/$1;
    }
    # strip /dt/api/ -> /api/ BEFORE proxying
    rewrite ^/dt/api/(.*)$ /api/$1 break;
    proxy_pass http://dt-apiserver:8080;    # NOTE: no URI part here

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;
}

# --- UI under /dt/ ---
location ^~ /dt/ {
    if ($request_uri ~ ^/dt/(?:dt/)+(.*)$) { return 301 /dt/$1; }

    proxy_pass http://dt-frontend:8080/;

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;

    proxy_hide_header X-Frame-Options;
    proxy_hide_header Content-Security-Policy;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Content-Security-Policy "frame-ancestors 'self'" always;

    # --- sub_filter setup ---
    sub_filter_once off;
    sub_filter_types text/html;

    # 1) Ensure base href points at /dt/
    sub_filter "<base href=\"/\">" "<base href=\"/dt/\">";
    sub_filter "<base href=/ >"    "<base href=\"/dt/\">";

   # inject a lightweight normalizer (NO $ anywhere)
    sub_filter '<head>' '<head><script>(function(){
  function norm(p){
    p = p.replace(/^\/(?:dt\/)+/, "/dt/");
    p = p.replace(/^\/dt\/(?:api\/)+/, "/dt/api/");
    return p;
  }
  
  var _ps=history.pushState, _rs=history.replaceState;
  
  history.pushState=function(s,t,u){
    if(typeof u==="string"){
      try{
        var url=new URL(u,location.origin);
        var np=norm(url.pathname);
        if(np!==url.pathname){
          u=np+url.search+url.hash;
          // Force navigation by using replaceState then dispatching popstate
          _ps.call(this,s,t,u);
          window.dispatchEvent(new PopStateEvent("popstate", {state: s}));
          return;
        }
      }catch(e){}
    }
    return _ps.call(this,s,t,u);
  };
  
  history.replaceState=function(s,t,u){
    if(typeof u==="string"){
      try{
        var url=new URL(u,location.origin);
        var np=norm(url.pathname);
        if(np!==url.pathname){
          u=np+url.search+url.hash;
          _rs.call(this,s,t,u);
          window.dispatchEvent(new PopStateEvent("popstate", {state: s}));
          return;
        }
      }catch(e){}
    }
    return _rs.call(this,s,t,u);
  };
  
  document.addEventListener("DOMContentLoaded",function(){
    var want=norm(location.pathname)+location.search+location.hash;
    var have=location.pathname+location.search+location.hash;
    if(want!==have){
      history.replaceState(history.state,document.title,want);
      window.dispatchEvent(new PopStateEvent("popstate", {state: history.state}));
    }
  });
})();</script>';
    # SPA deep-link fallback: if upstream returns 404, serve /dt/index.html
    proxy_intercept_errors on;
    error_page 404 = /dt/index.html;
}




        # Proxy notebook requests to jupyter on study instances
        location ~* "\/proxy\/([a-f0-9]{12})\/nb/(.*$)" {
        # location ~* ^/proxy/([A-Za-z0-9._-]{3,64})/nb/(.*)$ {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Scheme $scheme;

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_pass http://$1:8888/$2$is_args$args;
        }

        # Proxy any other requests to flask on study instances
        location ~* "\/proxy\/([a-f0-9]{12})\/(.*$)" {
        # location ~* ^/proxy/([A-Za-z0-9._-]{3,64})/(.*)$ {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Scheme $scheme;

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_pass http://$1:60000/$2$is_args$args;

            proxy_redirect http://$1:60000/ /proxy/$1/;
        }

        # Proxy requests to submit app
        location ~ /(getcode|survey) {
            proxy_pass http://submit:8000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one

        location ~ /\.ht {
            deny all;
        }

        location ~ /\.git {
            deny all;
        }

        location = /\config.php {
            deny all;
        }

        location /backup {
            deny all;
        }

    }
}
